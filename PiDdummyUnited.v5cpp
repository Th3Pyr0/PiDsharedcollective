{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor halfright = motor(PORT14, ratio18_1, true);\n\nmotor fullright = motor(PORT13, ratio18_1, false);\n\nmotor fullleft = motor(PORT17, ratio18_1, false);\n\nmotor halfleft = motor(PORT18, ratio18_1, true);\n\ndigital_out newmadkick = digital_out(Brain.ThreeWirePort.A);\ndigital_out newmadkick2 = digital_out(Brain.ThreeWirePort.B);\nrotation rotate = rotation(PORT1, false);\n\ndigital_out Leftists = digital_out(Brain.ThreeWirePort.C);\ndigital_out Rightists = digital_out(Brain.ThreeWirePort.D);\nmotor RightB = motor(PORT2, ratio18_1, true);\n\nmotor RightA = motor(PORT3, ratio18_1, false);\n\nmotor LeftA = motor(PORT10, ratio18_1, false);\n\nmotor LeftB = motor(PORT5, ratio18_1, true);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project: Reformed code                                               \n//    Author: \n//    Created: 10/23/2023\n//    Configuration: IDK what this means       \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include <vex.h>\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\nusing namespace std;\n\n// DECLARE VARIALBES:\n\n//pre-auton\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n  \n}\n\n\n\ndouble kP = 0.5;\ndouble kI = 0.0;\ndouble kD = 0.0;\ndouble TurnkP = 0.0;\ndouble TurnkI = 0.0;\ndouble TurnkD = 0.0;\nint DesVal = 200;\nint DesTurnVal = 0;\n\nint error;\nint previError = 0;\nint derivative;\nint totalError = 0;\n\nint Turnerror;\nint TurnpreviError = 0;\nint Turnderivative;\nint TurntotalError = 0;\n\nbool MiH = false; //Resets the Drive sensors when true\n\n\nbool enabledrivepid = true;\ndouble LeftTotalDivided = (LeftB.position(degrees)+LeftA.position(degrees))/2;\ndouble RightTotalDivided = (RightB.position(degrees)+RightA.position(degrees))/2;\n\nint DrivePid(){\n\nwhile(enabledrivepid){\n\n    if (MiH){\n      MiH = false;\n      LeftTotalDivided = 0;\n      RightTotalDivided = 0;\n    }\n\n  double AvgPos = (RightTotalDivided + LeftTotalDivided)/2;\n  error = AvgPos - DesVal;\n  derivative = error - previError; //What else would a derivative be? I know you aren't special, so I don't need to specify.\n  //Integral of Velocity is Pos. Integral of Pos is absolute Pos in a given state of time, known as Absement.\n  totalError += error;\n  double LatMotorPower = error * kP + derivative * kD + totalError * kI;\n//////////////////////////////////////\n//turn CONTROL\n//////////////////////////////////////\n\n double TurnDiff = RightTotalDivided - LeftTotalDivided;\n  Turnerror = TurnDiff - DesTurnVal;\n  Turnderivative = Turnerror - TurnpreviError; //What else would a derivative be? I know you aren't special, so I don't need to specify.\n  //Integral of Velocity is Pos. Integral of Pos is absolute Pos in a given state of time, known as Absement.\n  TurntotalError += Turnerror;\n  double THISISPOWER = Turnerror * TurnkP + Turnderivative * TurnkD + TurntotalError * TurnkI;\n\n\nLeftA.spin(forward, LatMotorPower + THISISPOWER, voltageUnits::volt);\nLeftB.spin(forward, LatMotorPower + THISISPOWER, voltageUnits::volt);\n\nRightA.spin(reverse, LatMotorPower - THISISPOWER, voltageUnits::volt);\nRightB.spin(reverse, LatMotorPower - THISISPOWER, voltageUnits::volt);\n\n\n\n\npreviError = error;\nTurnpreviError = Turnerror;\nvex::task::sleep(20);\n\n\n  } \n\nreturn 1;\n}\n\nvoid autonomous(void) {\n  MiH = true;\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n  vex::task think2xmorethanyoubuild(DrivePid);\n \n  DesVal = 100;\n  DesTurnVal = 600;\n  vex::task::sleep(2000);\n  MiH = true;\n  DesVal = 100;\n  DesTurnVal = 600;\n  \n  \n}\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  while (true) {\n    wait(20, msec);\n    //enabledrivepid = false;\n\n    //driveTrain();\n    LeftA.spin(forward, Controller1.Axis3.position() + Controller1.Axis1.position(), pct);\n    LeftB.spin(forward, Controller1.Axis3.position() + Controller1.Axis1.position(), pct);\n    \n    RightB.spin(reverse, Controller1.Axis3.position() - Controller1.Axis1.position(), pct);\n    RightA.spin(reverse , Controller1.Axis3.position() - Controller1.Axis1.position(), pct);\n    \n  //intake\n\n   \n    \n\n}\n}\n\n\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[14],"name":"halfright","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[13],"name":"fullright","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[17],"name":"fullleft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[18],"name":"halfleft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"newmadkick","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"newmadkick2","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"rotate","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[3],"name":"Leftists","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"Rightists","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10],"name":"LeftA","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[5],"name":"LeftB","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"RightA","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[3],"name":"RightB","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"}}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}